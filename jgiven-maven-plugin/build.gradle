description = 'JGiven Maven Mojo'

dependencies {
    compile group: 'org.apache.maven.plugin-tools', name: 'maven-plugin-tools-api', version: '3.5'
    compile group: 'org.apache.maven.plugin-tools', name: 'maven-plugin-annotations', version: '3.5'
    compile project(':jgiven-core')
    runtime project(':jgiven-html5-report')
}

task copyClasses(type: Copy, dependsOn: classes) {
    from 'build/classes/main'
    into 'build/maven/target/classes'
}

task generatePom(type: Copy, dependsOn: copyClasses) {
    from 'src/main/maven'
    into 'build/maven'
    expand(version: project.version)
}

task generateMavenPlugin(type: Exec, dependsOn: generatePom) {
    // currenlty it seems to be the more or less only clean solution
    // to generate a plugin.xml file to use maven directly
    // if anyone has a better solution please let us know!
	commandLine 'mvn', '-U', '-f', 'build/maven/pom.xml', 'plugin:descriptor'
}

generateMavenPlugin.onlyIf {
   // as the generateMavenPlugin task requires mvn, it is only executed
   // when actually uploading the archives
   // that way the standard build stays maven-free
   gradle.taskGraph.hasTask(uploadArchives) || gradle.taskGraph.hasTask(publishToMavenLocal)
}

task copyMavenPlugin(type: Copy, dependsOn: generateMavenPlugin) {
    from('build/maven/target/classes') {
       include '**/plugin.xml'
    }
    into 'build/classes/main'
}

task copyPom(type: Copy, dependsOn: generatePom) {
    from('build/maven') {
       include '**/pom.*'
       filter { line ->
           line.replaceAll("<version>.*</version>","")
       }
    }
    into 'build/classes/main/META-INF/maven/com.tngtech.jgiven/jgiven-maven-plugin'
    includeEmptyDirs = false

}

jar.dependsOn copyMavenPlugin, copyPom
