description = 'JGiven - BDD for Java in Java'

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

allprojects  {
    group = 'com.tngtech.jgiven'
    version = '0.5.4-SNAPSHOT'
}

subprojects {
    apply plugin: 'eclipse'
    apply plugin: 'jacoco'
    apply plugin: 'java'

    description "${rootProject.description} - Module ${project.name}"
    sourceCompatibility = targetCompatibility = 1.6

    ext {
        junitDataproviderVersion = '1.9.2'
        junitVersion = '4.9'
        junitParamsVersion = '1.0.2'
        testngVersion = '6.8.7'
        assertjVersion = '1.4.0'
        slf4jVersion = '1.7.5'
        cglibVersion = '2.2.2'
        paranamerVersion = '2.6'
        jansiVersion = '1.11'
        gsonVersion = '2.2.4'
        guavaVersion = '16.0.1'
        springVersion = '3.2.4.RELEASE'
        checkstyleVersion = '2.12.1'
        jacocoVersion = '0.7.1.201405082137'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion

        testCompile group: 'org.slf4j', name: 'jcl-over-slf4j', version: slf4jVersion
        testCompile group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion
        testCompile group: 'junit', name: 'junit', version: junitVersion
        testCompile group: 'org.assertj', name: 'assertj-core', version: assertjVersion
        testCompile group: 'com.tngtech.java', name: 'junit-dataprovider', version: junitDataproviderVersion
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }

    test {
        systemProperty 'jgiven.report.dir', 'build/report/jgiven/json'
    }

    task jgivenReport(type: JavaExec) {
        main = 'com.tngtech.jgiven.report.ReportGenerator'
        args '--dir=build/report/jgiven/json',
             '--todir=build/report/jgiven/html',
             '--customcss=build/resources/test/jgiven/custom.css'

        classpath = configurations.testCompile
    }

    // -- build and publish artifacts -------------------------------------------------------------------------------------
    apply plugin: 'maven'
    apply plugin: 'signing'

    signing {
        // requires gradle.properties, see http://www.gradle.org/docs/current/userguide/signing_plugin.html
        required {
            gradle.taskGraph.hasTask('uploadArchives')
        }
        sign configurations.archives
    }

    ext {
        sonatypeUsername = (rootProject.hasProperty('sonatypeUsername')) ? rootProject.sonatypeUsername : ''
        sonatypePassword = (rootProject.hasProperty('sonatypePassword')) ? rootProject.sonatypePassword : ''
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { deployment ->
                    signing.signPom(deployment)
                }
                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                    // username and password from gradle.properties
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
                snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom {
                    project {
                        name project.name
                        packaging 'jar'
                        url 'https://github.com/TNG/jgiven'

                        scm {
                            url 'scm:git@github.com:TNG/jgiven.git'
                            connection 'scm:git@github.com:TNG/jgiven.git'
                            developerConnection 'scm:git@github.com:TNG/jgiven.git'
                        }

                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'janschaefer'
                                name 'Jan SchÃ¤efer'
                            }
                        }
                    }
                    whenConfigured { pom ->
                        pom.dependencies.find{ dep -> dep.groupId == 'junit' && dep.artifactId == 'junit' }.with {
                            version = '[4.9,4.11]'
                            scope = 'provided'
                        }
                        pom.dependencies.removeAll(pom.dependencies.findAll{ dep -> dep.scope in [ 'test' ] })
                    }
                }
            }
        }
    }

    // to be able use project.description which may be overridden in later executed build.gradle of subproject
    project.afterEvaluate {
        uploadArchives.repositories {
            mavenDeployer.pom.project {
                description = project.description
            }
        }
    }
}
